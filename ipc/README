
Heterogeneous IPC Module
------------------------
IPC module is provided as user space library (libipc.so). Apart from
providing APIs for L2-L1 communication, a hugepage based user space
shared memory manager is also provided as a user space library (libmem.so).
In order to use IPC services, user space application needs to be linked
with these libraries.

IPC support for Multiple Application
------------------------------------
Support added for accessing an IPC channel by multiple applications, simultaneously.
This support is disabled by default and can be enabled  during compile time using a
compilation flag CONFIG_LOCK.

If this support is enabled then, internally, a lock is obtained on IPC channel before
performing any Rx, Tx operation on that channel. This will be an overhead in case where
only a single application is using the IPC Module.

Directory Structure
-------------------
ipc/include     -       Include directory for IPC public and private
                        header files
ipc/lib         -       Source code of IPC, user space ipc helper
                        memory manager, user space dma driver
fsl_shm         -       Source code of user space Shared Memory Manager
dsp_boot        -       Source code of DSP boot loader
test            -       Reference Test application which uses IPC channels

Compilation Procedure
---------------------
1. Set KERNEL_DIR as the path of linux soruce code
2. Set CROSS_COMPILE as the <path of toolchain>/.../powerpc-linux-gnu-
3. run make
4. libipc.so, libmem.so, ipc_test,
	      ipc_test67, dump_mem - gets created under ipc directory ,
			    dsp_bt - gets created under
				     dsp_boot directory
5. For enabling access of IPC channel by multiple application, pass "CONFIG_LOCK=1"
flag as an argument to make as follows:
     make CONFIG_LOCK=1

bootargs Required
-----------------
Please set following bootargs, shown as example:
default_hugepagesz=256m
hugepagesz=256m
hugepages=1
max_num_ipc_channels=64
max_channel_depth=16

Test Application (Single RAT only Solutions)
----------------
Test applications (ipc_test, ipc_test67) can be started once the DSP image
(ipc_913x_dbg_0.5.bin, present in rootfs under /DSP_images) is loaded
sucessfully by dsp_bt application.

Test runs with 6 channels, where for each pair of channels PowerPC is producer
and DSP is consumer. For each of the channel pairs a seperate thread is
started by the Linux test application.

The channel pairs are
2-3	Channel 2 is a MSG Channel where DSP is consumer
	Channel 3 is a PTR Channel where PowerPC is consumer.

	Linux sends a message on Channel 2, DSP returns back the pointer of the
	message on channel 3.

	On Channel 2, DSP receives VIRQ
	On Channel 3, Linux polls for recv pointer.

4-5	Channel 4 is a PTR channel where Linux is a consumer.
	Channel 5 is a MSG channel where DSP is a consumer.

	Linux receives a ptr on channel 4, copies the length number of characters
	from the pointer into a local buffer and sends the buffer on to channel 5.

	On Channel 4, Linux Polls
	On Channel 5, DSP Polls

6-7	Channel 6 is a TX Request Channel where Linux is producer.
	Channel 7 is a PTR channel were linux is consumer.

	Linux sends a dummy TX request fapi message a set of buffer using DMA.
	DSP returns to linux a pointer which points to a memory location
	containing first 16 bytes of fapi message and the first buffer.

For channel 2-3,4-5
$./ipc_test

For Channel 6-7
$./ipc_test67

Test Application (Multi RAT)
----------------
ipc_test_mrat and ipc_test67_mrat is added for testing multirat support from PA side.
To test multi rat without actual dsp image ipc_test_dsp_stub is provided.

ipc_test_mrat
	is same as ipc_test but with an addition that at the time of execution
	a command line argument can be provided as the rat_id.
	
	for eg: 

		ipc_test_mrat 0 would run the test for rat_id 0 
		ipc_test_mrat 1 would run the test for rat_id 1

ipc_test67_mrat
	is same as ipc_test67 but with an addition that rat_id can be specified
	Also channel 7 operation is not there.

ipc_test_dsp_stub
	This application is added to test MultiRAT without DSP. This can be used with 
	ipc_test_mrat and ipc_test67_mrat.
	This application also takes rat_id as input paramter.

	Note: It should be executed before any pa tests.



Memory Dump
-----------

dump_mem demo application can be found out in /ipc directory in the rootfile
system.
It can dump the Memory contents of address range to a location specified by
the application.

Requirements:
1. mem_dump_cfg.txt- Memory areas that needs to be dumped are specified in this    file. Each memory area needs to be specified in terms of start address and      size. Multiple discontiguous memory areas can be specified like following:
   0x37000000 0x100
   0x38000000 0x200
2. The address and size should be in hexadecimal format.
3. The start addresses needs to be page aligned.

Steps to Run:
1. cd /ipc
2. Run ./dump_mem
3. The output log is generated in the file named Memory_dumped.txt
4. cat Memory_dumped.txt
dump_memory_dsp status is (768) 0x300

  fedcba98  fedcba98  00004000  10000000
  0f000000  1f000000  01000000  3700002c
  00000000  37000038  37000050  00000040
  00000010  370000e8  b0022d64  00000960
