
Heterogeneous IPC Module
------------------------
IPC module is provided as user space library (libipc.so). Apart from
providing APIs for L2-L1 communication, a hugepage based user space
shared memory manager is also provided as a user space library (libmem.so).
In order to use IPC services, user space application needs to be linked
with these libraries.

Directory Structure
-------------------
ipc/include     -       Include directory for IPC public and private
                        header files
ipc/lib         -       Source code of IPC, user space ipc helper
                        memory manager, user space dma driver
fsl_shm         -       Source code of user space Shared Memory Manager
dsp_boot        -       Source code of DSP boot loader
test            -       Reference Test application which uses IPC channels

Compilation Procedure
---------------------
1. Set KERNEL_DIR as the path of linux soruce code
2. Set CROSS_COMPILE as the <path of toolchain>/.../powerpc-linux-gnu-
3. run make
4. libipc.so, libmem.so, ipc_test, ipc_test67 - gets created under ipc
                                                directory,
                                       dsp_bt - gets created under
                                                dsp_boot directory

bootargs Required
-----------------
Please set following bootargs, shown as example:
default_hugepagesz=256m
hugepagesz=256m
hugepages=1
max_num_ipc_channels=64
max_channel_depth=16

Test Application
----------------
Test applications (ipc_test, ipc_test67) can be started once the DSP image
(ipc_913x_dbg_0.5.bin, present in rootfs under /DSP_images) is loaded
sucessfully by dsp_bt application.

Test runs with 6 channels, where for each pair of channels PowerPC is producer
and DSP is consumer. For each of the channel pairs a seperate thread is
started by the Linux test application.

The channel pairs are
2-3	Channel 2 is a MSG Channel where DSP is consumer
	Channel 3 is a PTR Channel where PowerPC is consumer.

	Linux sends a message on Channel 2, DSP returns back the pointer of the
	message on channel 3.

	On Channel 2, DSP receives VIRQ
	On Channel 3, Linux polls for recv pointer.

4-5	Channel 4 is a PTR channel where Linux is a consumer.
	Channel 5 is a MSG channel where DSP is a consumer.

	Linux receives a ptr on channel 4, copies the length number of characters
	from the pointer into a local buffer and sends the buffer on to channel 5.

	On Channel 4, Linux Polls
	On Channel 5, DSP Polls

6-7	Channel 6 is a TX Request Channel where Linux is producer.
	Channel 7 is a PTR channel were linux is consumer.

	Linux sends a dummy TX request fapi message a set of buffer using DMA.
	DSP returns to linux a pointer which points to a memory location
	containing first 16 bytes of fapi message and the first buffer.

For channel 2-3,4-5
$./ipc_test

For Channel 6-7
$./ipc_test67
